Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	varying vec4 rayDir;
	uniform vec3 viewPos;
	uniform sampler2D colorTexture;
	uniform mat4 quadrics[140];
	uniform vec3 brdfs[70];
	/** brdf spec: [x, y, z, w]
			x = -a.b (board) | 0 (red chess) | 1 (blue chess) | 2 (glass)
						^ row a, col b is highlighted; or -1 if no highlight
			y = reflectance
			z = 0 (diffuse only) | >0 (phong-blinn, specular exponent)
	**/
	uniform vec4 lightPos[3];
	uniform vec4 lightPowerDensity[3];
	/** light spec:
			lightPos.w = 0 (directional) | 1 (point)
			lightPowerDensity.w = 0 | 1 (shadows?)
	**/
	const int QUAD_COUNT = 70;
	const int LIGHT_COUNT = 3;
	const int TRACE_COUNT = 3;
	const float PI = 3.1415926;
	const float TOLERANCE = 0.02;

	const vec3 RED_COLOR = vec3(0.5, 0.0, 0.0);
	const vec3 BLUE_COLOR = vec3(0.5, 0.5, 1.0);
	const vec3 BOARD_COLOR = vec3(0.3, 0.4, 0.5);
	const vec3 SELECT_COLOR = vec3(1.0, 1.0, 0.0);

	bool isClose(float a, float b) {
		return abs(a - b) < TOLERANCE;
	}

	float findBetterT(float t1, float t2) {
		if (t1 >= TOLERANCE && t1 < t2 || t2 < TOLERANCE) {
			return t1;
		}
		return t2;
	}

	float intersectClippedQuadric(vec4 e, vec4 d, mat4 A, mat4 B) {
		float a = dot(d * A, d);
		float b = dot(d * A, e) + dot(e * A, d);
		float c = dot(e * A, e);
		float D = b*b - 4.0*a*c;

		if (D < 0.0) { return -1.0; }
		if (a == 0.0) {
			float t = -c/b;
			vec4 r = e + d * t;
			if (dot(r * B, r) > 0.0) { t = -1.0; }
			return t;
		}

		float t1 = (-b + sqrt(D)) / (2.0*a);
		float t2 = (-b - sqrt(D)) / (2.0*a);
		vec4 r1 = e + d * t1;
		vec4 r2 = e + d * t2;
		if (dot(r1 * B, r1) > 0.0) { t1 = -1.0; }
		if (dot(r2 * B, r2) > 0.0) { t2 = -1.0; }
		return findBetterT(t1, t2);
	}

	bool findBestHit(vec4 e, vec4 d, 
					out float bestT, out vec3 bestBrdf, out mat4 bestA) {
		bestT = -1.0;
		for (int i = 0; i < QUAD_COUNT; i++) {
			float t1 = intersectClippedQuadric(e, d, 
							quadrics[2*i], quadrics[2*i+1]);
			float t2 = intersectClippedQuadric(e, d, 
							quadrics[2*i+1], quadrics[2*i]);
			float t = findBetterT(t1, t2);
			bestT = findBetterT(t, bestT);
			if (t == bestT) {
				bestBrdf = brdfs[i];
				if (t == t1) {
					bestA = quadrics[2*i];
				} else {
					bestA = quadrics[2*i+1];
				}
			}
		}
		return bestT >= TOLERANCE && bestT < 100.0;
	}

	float snoise(vec3 r) {
		vec3 s = vec3(7502, 22777, 4767);
		float w = 0.0;
		for(int i = 0; i < 16; i++) {
			w += sin(dot(s - vec3(32768, 32768, 32768), r * 40.0) / 65536.0);
			s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
		}
		return w / 32.0 + 0.5;
	}

	vec3 getMarbleTexture(vec3 position) {
		float w = position.x * 0.1 + snoise(position * 0.1) * 60.0;
		w = pow(sin(w)*0.5 + 0.5, 4.0);
		return vec3(0.4, 0.5, 0.4) * w + vec3(0.6, 0.8, 0.6) * (1.0 - w);
	}

	vec3 getBoardTexture(vec3 worldPos, float pos) {
		float row = floor(worldPos.z / 2.0) + 5.0;
		float col = floor(worldPos.x / 2.0) + 5.0;
		if (row > 0.0 && row < 9.0 && col > 0.0 && col < 9.0) {
			vec3 color;
			if (mod(col + row, 2.0) > 0.0) {
				color = vec3(0, 0, 0);
			} else {
				color = vec3(1, 1, 1);
			}
			if (pos > 1.0 && isClose(floor(pos), col) && 
											 isClose(fract(pos)*10.0, row)) {
				color = color * 0.5 + SELECT_COLOR * 0.5;
			}
			return color;
		}
		return BOARD_COLOR;
	}

	vec3 getProbeTexture(vec4 d) {
		vec3 m = normalize(d.xyz);
		float x = atan(m.z/m.x) + (m.x < 0.0? (m.z > 0.0? 2.0*PI : 0.0) : PI);
		float y = m.y/2.0 + 0.5;
		vec2 probeTex = vec2(x/(2.0*PI), -y);
		return texture2D(colorTexture, probeTex).xyz;
	}

	bool isShadowed(vec4 e, vec4 d) {
		for (int i = 0; i < QUAD_COUNT; i++) {
			float t;
			float t1 = intersectClippedQuadric(e, d, 
							quadrics[2*i], quadrics[2*i+1]);
			float t2 = intersectClippedQuadric(e, d, 
							quadrics[2*i+1], quadrics[2*i]);
			t = findBetterT(t1, t2);
			if (t >= TOLERANCE) {
				return true;
			}
		}
		return false;
	}

	vec3 getColor(vec3 worldPos, vec3 worldNormal, vec3 brdf) {
		vec3 color;
		for (int i = 0; i < LIGHT_COUNT; i++) {
			float isPB = brdf.z > 0.0? 1.0 : 0.0;

			vec3 lightDir = normalize(lightPos[i].xyz -worldPos*lightPos[i].w);
			vec3 viewDir = normalize(viewPos - worldPos);

			if (lightPowerDensity[i].w > 0.0 &&
				isShadowed(vec4(worldPos, 1), vec4(lightDir, 0))) {
				continue;
			}

			float nl = max(dot(worldNormal, lightDir), 0.0);
			float nh = max(dot(worldNormal, normalize(lightDir+viewDir)), 0.0);

			vec3 M = lightPowerDensity[i].xyz;
			if (lightPos[i].w > 0.0) {
				M /= pow(length(lightPos[i].xyz - worldPos), 2.0);
			}
			vec3 kd;
			if (brdf.x < 0.0) {
				kd = getBoardTexture(worldPos, -brdf.x) * 0.6 + 
							getMarbleTexture(worldPos) * 0.4;
			} else if (brdf.x > 0.0) {
				kd = BLUE_COLOR;
			} else {
				kd = RED_COLOR;
			}
			color += M * (kd * nl + vec3(1,1,1) * pow(nh, brdf.z) * isPB);
		}
		return color;
	}

	void main(void) {
		vec4 e = vec4(viewPos, 1);
		vec4 d = normalize(vec4(rayDir.xyz, 0));
		vec3 radiance = vec3(0, 0, 0);
		vec3 contrib = vec3(1, 1, 1);
		float t; vec3 brdf; mat4 A;

		for (int n = 0; n < TRACE_COUNT; n++) {
			if (!findBestHit(e, d, t, brdf, A)) {
				radiance += getProbeTexture(d) * contrib;
				break;
			}
			vec3 color = vec3(0, 0, 0);
			vec4 r = e + d * t;
			vec3 worldPos = r.xyz;
			vec3 worldNormal = normalize((A * r + r * A).xyz);
			
			radiance += getColor(worldPos, worldNormal, brdf) * contrib;
			contrib *= brdf.y;
			if (contrib.x < 0.1 && contrib.y < 0.1 && contrib.z < 0.1) { break; }
			e = vec4(worldPos, 1);
			d = vec4(normalize(reflect(d.xyz, worldNormal)), 0);
			e += d * TOLERANCE;
		}

		gl_FragColor = vec4(radiance, 1);
	}
`;